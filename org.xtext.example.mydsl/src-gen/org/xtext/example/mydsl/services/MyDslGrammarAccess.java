/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FSMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FSM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFSMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cInitialstateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitialstateInitialStateParserRuleCall_2_0 = (RuleCall)cInitialstateAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cStateKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cStateAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cStateStateParserRuleCall_3_0_1_0 = (RuleCall)cStateAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_0_2 = (Group)cGroup_3_0.eContents().get(2);
		private final Keyword cCommaKeyword_3_0_2_0 = (Keyword)cGroup_3_0_2.eContents().get(0);
		private final Assignment cStateAssignment_3_0_2_1 = (Assignment)cGroup_3_0_2.eContents().get(1);
		private final RuleCall cStateStateParserRuleCall_3_0_2_1_0 = (RuleCall)cStateAssignment_3_0_2_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cTrKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cTransitionAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cTransitionTransitionParserRuleCall_3_1_1_0 = (RuleCall)cTransitionAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_1_2 = (Group)cGroup_3_1.eContents().get(2);
		private final Keyword cCommaKeyword_3_1_2_0 = (Keyword)cGroup_3_1_2.eContents().get(0);
		private final Assignment cTransitionAssignment_3_1_2_1 = (Assignment)cGroup_3_1_2.eContents().get(1);
		private final RuleCall cTransitionTransitionParserRuleCall_3_1_2_1_0 = (RuleCall)cTransitionAssignment_3_1_2_1.eContents().get(0);
		
		//FSM:
		//	'FSM'
		//	name=EString
		//	initialstate=InitialState ('state' state+=State ("," state+=State)* | 'tr' transition+=Transition (','
		//	transition+=Transition)*)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'FSM' name=EString initialstate=InitialState ('state' state+=State ("," state+=State)* | 'tr' transition+=Transition
		//(',' transition+=Transition)*)*
		public Group getGroup() { return cGroup; }
		
		//'FSM'
		public Keyword getFSMKeyword_0() { return cFSMKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//initialstate=InitialState
		public Assignment getInitialstateAssignment_2() { return cInitialstateAssignment_2; }
		
		//InitialState
		public RuleCall getInitialstateInitialStateParserRuleCall_2_0() { return cInitialstateInitialStateParserRuleCall_2_0; }
		
		//('state' state+=State ("," state+=State)* | 'tr' transition+=Transition (',' transition+=Transition)*)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'state' state+=State ("," state+=State)*
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'state'
		public Keyword getStateKeyword_3_0_0() { return cStateKeyword_3_0_0; }
		
		//state+=State
		public Assignment getStateAssignment_3_0_1() { return cStateAssignment_3_0_1; }
		
		//State
		public RuleCall getStateStateParserRuleCall_3_0_1_0() { return cStateStateParserRuleCall_3_0_1_0; }
		
		//("," state+=State)*
		public Group getGroup_3_0_2() { return cGroup_3_0_2; }
		
		//","
		public Keyword getCommaKeyword_3_0_2_0() { return cCommaKeyword_3_0_2_0; }
		
		//state+=State
		public Assignment getStateAssignment_3_0_2_1() { return cStateAssignment_3_0_2_1; }
		
		//State
		public RuleCall getStateStateParserRuleCall_3_0_2_1_0() { return cStateStateParserRuleCall_3_0_2_1_0; }
		
		//'tr' transition+=Transition (',' transition+=Transition)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'tr'
		public Keyword getTrKeyword_3_1_0() { return cTrKeyword_3_1_0; }
		
		//transition+=Transition
		public Assignment getTransitionAssignment_3_1_1() { return cTransitionAssignment_3_1_1; }
		
		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_3_1_1_0() { return cTransitionTransitionParserRuleCall_3_1_1_0; }
		
		//(',' transition+=Transition)*
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }
		
		//','
		public Keyword getCommaKeyword_3_1_2_0() { return cCommaKeyword_3_1_2_0; }
		
		//transition+=Transition
		public Assignment getTransitionAssignment_3_1_2_1() { return cTransitionAssignment_3_1_2_1; }
		
		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_3_1_2_1_0() { return cTransitionTransitionParserRuleCall_3_1_2_1_0; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.State");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cState_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInitialStateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//State:
		//	State_Impl | InitialState;
		@Override public ParserRule getRule() { return rule; }
		
		//State_Impl | InitialState
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//State_Impl
		public RuleCall getState_ImplParserRuleCall_0() { return cState_ImplParserRuleCall_0; }
		
		//InitialState
		public RuleCall getInitialStateParserRuleCall_1() { return cInitialStateParserRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class State_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.State_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsFinalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsFinalIsFinalKeyword_1_0 = (Keyword)cIsFinalAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//State_Impl State:
		//	{State} isFinal?='isFinal'?
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{State} isFinal?='isFinal'? name=EString
		public Group getGroup() { return cGroup; }
		
		//{State}
		public Action getStateAction_0() { return cStateAction_0; }
		
		//isFinal?='isFinal'?
		public Assignment getIsFinalAssignment_1() { return cIsFinalAssignment_1; }
		
		//'isFinal'
		public Keyword getIsFinalIsFinalKeyword_1_0() { return cIsFinalIsFinalKeyword_1_0; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTriggerKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTriggerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTriggerEStringParserRuleCall_3_0 = (RuleCall)cTriggerAssignment_3.eContents().get(0);
		private final Assignment cSourceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSourceStateCrossReference_4_0 = (CrossReference)cSourceAssignment_4.eContents().get(0);
		private final RuleCall cSourceStateEStringParserRuleCall_4_0_1 = (RuleCall)cSourceStateCrossReference_4_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTargetAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTargetStateCrossReference_6_0 = (CrossReference)cTargetAssignment_6.eContents().get(0);
		private final RuleCall cTargetStateEStringParserRuleCall_6_0_1 = (RuleCall)cTargetStateCrossReference_6_0.eContents().get(1);
		
		//Transition:
		//	{Transition} name=EString
		//	'trigger' trigger=EString
		//	source=[State|EString]
		//	'->'
		//	target=[State|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//{Transition} name=EString 'trigger' trigger=EString source=[State|EString] '->' target=[State|EString]
		public Group getGroup() { return cGroup; }
		
		//{Transition}
		public Action getTransitionAction_0() { return cTransitionAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'trigger'
		public Keyword getTriggerKeyword_2() { return cTriggerKeyword_2; }
		
		//trigger=EString
		public Assignment getTriggerAssignment_3() { return cTriggerAssignment_3; }
		
		//EString
		public RuleCall getTriggerEStringParserRuleCall_3_0() { return cTriggerEStringParserRuleCall_3_0; }
		
		//source=[State|EString]
		public Assignment getSourceAssignment_4() { return cSourceAssignment_4; }
		
		//[State|EString]
		public CrossReference getSourceStateCrossReference_4_0() { return cSourceStateCrossReference_4_0; }
		
		//EString
		public RuleCall getSourceStateEStringParserRuleCall_4_0_1() { return cSourceStateEStringParserRuleCall_4_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }
		
		//target=[State|EString]
		public Assignment getTargetAssignment_6() { return cTargetAssignment_6; }
		
		//[State|EString]
		public CrossReference getTargetStateCrossReference_6_0() { return cTargetStateCrossReference_6_0; }
		
		//EString
		public RuleCall getTargetStateEStringParserRuleCall_6_0_1() { return cTargetStateEStringParserRuleCall_6_0_1; }
	}
	public class InitialStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.InitialState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitialKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cInitialStateAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cIsFinalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsFinalIsFinalKeyword_2_0 = (Keyword)cIsFinalAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//InitialState:
		//	'initial' {InitialState} isFinal?='isFinal'?
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'initial' {InitialState} isFinal?='isFinal'? name=EString
		public Group getGroup() { return cGroup; }
		
		//'initial'
		public Keyword getInitialKeyword_0() { return cInitialKeyword_0; }
		
		//{InitialState}
		public Action getInitialStateAction_1() { return cInitialStateAction_1; }
		
		//isFinal?='isFinal'?
		public Assignment getIsFinalAssignment_2() { return cIsFinalAssignment_2; }
		
		//'isFinal'
		public Keyword getIsFinalIsFinalKeyword_2_0() { return cIsFinalIsFinalKeyword_2_0; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	
	private final FSMElements pFSM;
	private final StateElements pState;
	private final EStringElements pEString;
	private final State_ImplElements pState_Impl;
	private final TransitionElements pTransition;
	private final InitialStateElements pInitialState;
	private final EBooleanElements pEBoolean;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFSM = new FSMElements();
		this.pState = new StateElements();
		this.pEString = new EStringElements();
		this.pState_Impl = new State_ImplElements();
		this.pTransition = new TransitionElements();
		this.pInitialState = new InitialStateElements();
		this.pEBoolean = new EBooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//FSM:
	//	'FSM'
	//	name=EString
	//	initialstate=InitialState ('state' state+=State ("," state+=State)* | 'tr' transition+=Transition (','
	//	transition+=Transition)*)*;
	public FSMElements getFSMAccess() {
		return pFSM;
	}
	
	public ParserRule getFSMRule() {
		return getFSMAccess().getRule();
	}
	
	//State:
	//	State_Impl | InitialState;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//State_Impl State:
	//	{State} isFinal?='isFinal'?
	//	name=EString;
	public State_ImplElements getState_ImplAccess() {
		return pState_Impl;
	}
	
	public ParserRule getState_ImplRule() {
		return getState_ImplAccess().getRule();
	}
	
	//Transition:
	//	{Transition} name=EString
	//	'trigger' trigger=EString
	//	source=[State|EString]
	//	'->'
	//	target=[State|EString];
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//InitialState:
	//	'initial' {InitialState} isFinal?='isFinal'?
	//	name=EString;
	public InitialStateElements getInitialStateAccess() {
		return pInitialState;
	}
	
	public ParserRule getInitialStateRule() {
		return getInitialStateAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
