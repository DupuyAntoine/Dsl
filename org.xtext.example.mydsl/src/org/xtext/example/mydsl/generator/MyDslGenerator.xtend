/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dsl.FSM

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        var myFsm = resource.contents.get(0) as FSM
        
        fsa.generateFile(myFsm.name + '.java', GenerateMain(myFsm))    
        
        fsa.generateFile('State.java', GenerateState())
        
        fsa.generateFile('InitialState.java', GenerateInitial(myFsm.initialstate.name))
        
        myFsm.state.forEach[s | fsa.generateFile(s.name.toUpperCase() + '.java', GenerateStates(s.name))]
	}
	
	    def CharSequence GenerateMain(FSM myFsm) {
        return 
        '''
        import java.util.Scanner;
        class «myFsm.name» {            
            public static void main (String[] args) {
            	Scanner sc = new Scanner(System.in);
                State current = new «myFsm.initialstate.name»("«myFsm.initialstate.name»", «myFsm.initialstate.isFinal»);
                
                System.out.println("Etat initial : " + current.GetName());
                
                while(!current.isFinal) {
                	System.out.println("Veuillez saisir le transition trigger :");
                	String str = sc.nextLine();
                    switch(current.GetName()) {
                        «FOR tr : myFsm.transition»
                            «IF tr !== null»
                            	case "«tr.source.name»" :
                            	if (str.equals("«tr.trigger»")) {
                            	current = new «tr.target.name»("«tr.target.name»", «tr.target.isFinal»);
                            	System.out.println(current.GetName());
                            	}
                            	break;
                            «ENDIF»
                        «ENDFOR»
                    }
                }
            }
        }
        '''
    }
    
    def CharSequence GenerateState() {
        return
        '''
        abstract class State {
            String name;
            boolean isFinal;
            
            State(String name, boolean isFinal)
            {
                this.name = name;
                this.isFinal = isFinal;
            }
            String GetName() {return name;}
            Boolean GetIsFinal() {return isFinal;}
        }
        '''
    }
    
    def CharSequence GenerateInitial(String initialName) {
    	return
    	'''
    	class «initialName» extends State {
    		«initialName»(String name, boolean isFinal)
    		{
    			super(name, isFinal);
    		}
    	}
    	'''
    }
    
    def CharSequence GenerateStates(String stateName) {
        return
        '''
        class «stateName» extends State {
            «stateName»(String name, boolean isFinal)
            {
                super(name, isFinal);
            }
        }
        '''
    }    
	
}
